*상속
상속이란? 기존의 클래스를 재사용하여 새로운 클래스를 작성하는 것.
새로운 클래스 이름 뒤에 extends 부모클래스를 써주면 됨.
자손 클래스의 인스턴스를 생성하면 부모클래스를 포함한 인스턴스가 생성됨.

*포함
class Circle{
int x;
int y;
int z; }

class Point{
int x;
int y;}

-> class Circle{
Point p = new Point();
int z;}

*상속과 포함의 비교
원은 점이다 -> 상속
원은 점을 가지고있다. -> 포함

예)
package object;

public class Object {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Point[] p = { new Point(100, 100), new Point(140, 50), new Point(200, 100) };
		Triangle t = new Triangle(p);
		Circle c = new Circle(new Point(150, 150), 50);
		t.draw();
		c.draw();
	}
}

class Shape {
	String color = "black";

	void draw() {
		System.out.printf("[color=%s]%n", color);
	}
}

class Point {
	int x;
	int y;

	Point(int x, int y) {
		this.x = x;
		this.y = y;
	}

	Point() {
		this(0, 0);
	}

	String getXY() {
		return "(" + x + ")" + "," + y + ")";
	}
}

class Circle extends Shape {
	Point center;
	int r;

	Circle() {
		this(new Point(0, 0), 100);
	}

	Circle(Point center, int r) {
		this.center = center;
		this.r = r;
	}

	void draw() {
		System.out.printf("[center = (%d,%d), r= %d,color = %s]%n", center.x, center.y, r, color);
	}
}

class Triangle extends Shape {
	Point[] p = new Point[3];

	Triangle(Point[] p) {
		this.p = p;
	}

	void draw() {
		System.out.printf("[p1=%s, p2 =%s,p3= %s,color=%s]\n", p[0].getXY(), p[1].getXY(), p[2].getXY(), color);
	}
}

원은 도형이다 O
원은 점이다 X

원은 도형을 가지고 있다 X
원은 점을 가지고 있다 O

예제 7-3) Math.random() * 최대 숫자 -> 최대 숫자 내에서 뒤섞기

*단일상속
C++에서는 여러 부모클래스로 부터 상속을 받을 수 있었지만 자바에서는 불가능 하나의 부모에게만 상속받을 수 있음
두 부모클래스에 메서드명이 같을 때 구분하기 어렵기때문
해결책: 하나는 상속을 받고 하나는 포함을 시켜 사용할 수 있음

*Object클래스
모든 클래스의 최종 상위 클래스는 Object 클래스임
toString()함수나 equals(Object o)와 같은 메서드를 따로 정의하지 않고 사용할 수 있었던 이유는
Object 클래스라는 최종 상위 클래스로부터 상속되어진 메서드이기 때문

*오버라이딩
오버라이딩이란? 조상으로 부터 상속받은 메서드를 수정하여 사용하는 것
- 이름이 같아야 한다.
- 매개변수가 같아야 한다.
- 반환타입이 같아야 한다.

1) 접근 제어자는 조상 클래스의 메서드보다 좁은 범위로 변경할 수 없다.
2) 조상 클래스의 메서드보다 많은 수의 예외를 선언할 수 없다.
3) 인스턴스 메소드를 static 또는 반대로 변경할 수 없다.

*오버로딩 vs 오버라이딩
오버로딩 : 기존에 없는 메서드를 정의
오버라이딩 : 기존에 있는 메서드를 재정의

*super
super란? 자손 클래스에서 상속받은 조상클래스의 멤버를 참조하는데 사용되는 참조 변수
this도 사용할 수 있지만 조상클래스의 멤버와 자손클래스의 멤버가 중복이 될 때 super를 사용한다.

예) 
class Parent{
	int x= 10;
}

class Child extends Parent{
	int x =20;
      void method(){
	System.out.println(x);
	System.out.println(this.x);
	System.out.println(super.x);
}
} // this는 해당 클래스의 x값을 출력 super는 부모클래스의 x값을 출력!!

메서드 또한 this와 super로 구분이 가능

*super() - 조상 클래스의 생성자
this()는 해당 클래스의 생성자를 호출하지만 super() 조상클래스의 생성자를 호출
자손생성자의 첫줄에서 조상생성자가 호출되어야함 -> 자손에서 조상의 멤버를 사용하기 전에 호출해야하므로

*패키지
패키지란? 클래스의 묶음
다른 개발자가 개발한 클래스 라이브러리의 클래스와 이름이 충돌하는 것을 피할 수 있다.
String클래스는 java.lang이라는 패키지에 포함
클래스는 하나의 클래스파일(.class) 패키지는 하나의 디렉토리

package object;

import java.text.SimpleDateFormat;
import java.util.Date;

public class Object {

	public static void main(String[] args) {
		Date today = new Date();
		
		SimpleDateFormat date = new SimpleDateFormat("yyyy/mm/dd");
		SimpleDateFormat time = new SimpleDateFormat("hh:mm:ss a");
		
		System.out.println("오늘 날짜는 :"+date.format(today));
		System.out.println("지금 시간은 :"+time.format(today));
		
	}
}
	
*static import문
import 문을 사용하면 패키지명을 생략할 수 있듯이, import static문을 사용하면 클래스명을 생략할 수 있음
예) import static java.lang.System.out;
    import static java.lang.Math.*;
    out.println(random());

*제어자
제어자란? 클래스, 변수 또는 메서드의 선언부에 함께 사용되어 부가적인 의미를 부여
static - 유효범위에 영향을 주는 제어자
final - 상수화, 클래스 앞에 붙으면 확장이 될 수 없음(다른 클래스의 부모가 될 수 없음)
인스턴스 변수의 경우에는 매개변수를 갖는 생성자를 선언하여 인스턴스를 생성할 때 final의 변수도 같이 초기화
abstract - 메서드나 클래스의 선언부만 작성하고 실제 수행내용은 구현하지 않은 추상 객체를 선언하는데 사용
자손 클래스가 이 객체를 상속받아 오버라이딩 하는데에 의미를 둠

*접근제어자
private - 같은 클래스 내에서 접근가능
default - 같은 패키지 내에서 접근가능
protected - 같은 패캐지 그리고 다른 패키지의 자손 클래스에서 접근가능
public - 접근 제한이 전혀없음

개발자 약속) 멤버변수의 값을 읽는 메서드의 이름을 'get메서드'라고 하고 멤벼변수의 값을 변경하는 메서드를 'set메서드'라고
정의하자!!

*생성자의 접근 제어자
왜 생성자에 접근 제어자를 붙일까? private 접근제어자를 붙여 인스턴스 생성을 제한하기 위해
클래스내에서 생성된 인스턴스만 사용이 가능
------------------------------------------------자바의 정석 353p

*다형성
다형성이란? 조상클래스 타입의 참조변수로 자손클래스의 인스턴스를 참조할 수 있도록 하는 것.
같은 타입의 인스턴스지만 참조변수의 타입에 따라 사용할 수 있는 멤버의 개수가 달라진다.
예) Tv t = new CaptionTv(); -> 조상클래스로 자손클래스 참조를 하게되면 자손클래스의 조상클래스 멤버들만 사용이 가능

반대로 자손클래스의 참조변수로 조상클래스의 인스턴스를 참조할 수 있을까? 
안된다. 왜냐하면 조상클래스의 멤버보다 자손클래스의 멤버가 더 많기 때문
참조변수가 사용할 수 있는 멤버의 개수는 인스턴스의 멤버 개수보다 같거나 적어야 한다.
즉 참조변수 < 인스턴스 여야 한다. 다시 말해, 조상 참조 자손 인스턴스여야 성립

*참조변수의 형변환
조상에서 자손으로 또는 자손에서 조상으로 형변환이 가능
자손에서 조상으로 업캐스팅 될 때 형변환 생략가능, 그 반대는 불가능
왜 불가능하냐? 멤버가 더 많기 때문에 작은 것에서 큰 것으로 변화시키는 것이므로 생략이 불가능!

형변환을 왜 하느냐? 참조변수의 형변환을 통해서 참조하고 있는 인스턴스의 멤버의 범위를 조절하는 것 뿐!

package object;

public class Object {

	public static void main(String[] args) {
		Car car = null;
		FireEngine fe = new FireEngine();
		FireEngine fe2 = null;
		fe.water();
		car = fe;
		fe2 = (FireEngine)car;
		fe2.water();
	}
}

class Car {
	String color;
	int door;

	void drive() {
		System.out.println("drive, Brrrr~!");
	}

	void stop() {
		System.out.println("stop!!!");
	}
}

class FireEngine extends Car{
	
	void water() {
		System.out.println("불을 끄자!");
	}
}

****무조건 조상이 왼쪽 자손이 오른쪽 조상이 조상 인스턴스를 참조하고 있다면 자손에 형변환할 수 없음!!!
-----------------------------------------------------------------자바의 정석 361p

*instance of 연산자
참조변수가 참조하고 있는 인스턴스의 실제 타입을 알아보기 위한 연산자
형변환이 가능한가?를 연산하는 연산자

*참조변수와 인스턴스의 연결
조상 타입의 참조변수와 자손 타입의 참조변수의 차이는 멤버 개수
만약 조상 클래스와 자손클래스의 멤버 변수의 이름이 동일하다면
참조변수의 타입에 따라 조상클래스의 멤버인지 자손클래스의 멤버가 실행되는지
결정됨

package object;

public class Object {

	public static void main(String[] args) {
		Parent p;
		Child c;
		p = new Parent();
		c = new Child();
		System.out.println("p.x="+p.x);
		p.method();
		System.out.println("c.x="+c.x);
		
		c.method();
	}
}

class Parent{
	int x =100;
	void method() {
		System.out.println("Parent Method");
	}
}

class Child extends Parent{
	int x =200;
	void method() {
		System.out.println("x="+x);
		System.out.println("super.x="+super.x);
		System.out.println("this.x="+this.x);
	}
}

참조변수 super와 this로 구분할 수 있다.

*매개변수의 다형성
매개변수 또한 부모 참조변수로 선언하여 자손타입의 어떤 것이나 매개변수로 받아 들일 수 있음

package object;

class product{
	int price;
	int bonusPoint;
	
	product(int price)
	{
		this.price = price;
		this.bonusPoint = (int)(price /10.0);
	}
}

class Tv extends product{
	Tv(){
		super(100);
	}
	
	public String toString() {
		return "TV";
	}
}

class Computer extends product{
	Computer(){
		super(200);
	}
	public String toString() {
		return "Com";
	}
}

class Buyer{
	int money = 1000;
	int bonusPoint = 0;
	
	void buy(product p) {
		if(money<p.price)
		{
			System.out.println("잔액이 부족합니다.");
			return;
		}
		
		money -= p.price;
		bonusPoint += p.bonusPoint;
		System.out.println(p+"을 구입하셨습니다.");
		
	}
}

public class Object {

	public static void main(String[] args) {
		Buyer b = new Buyer();
		b.buy(new Tv());
		b.buy(new Computer());
		System.out.println("현재 남은 잔액은 "+b.money+"원입니다.");
		System.out.println("현재 보너스는"+b.bonusPoint+"점입니다.");
	}
}

*객체를 배열로 다루기
package object;

class Product {
	int price;
	int bonusPoint;

	Product(int price) {
		this.price = price;
		this.bonusPoint = price / 10;
	}

	Product() {
	}
}

class Tv extends Product {
	Tv() {
		super(100);
	}

	public String toString() {
		return "TV";
	}
}

class Computer extends Product {
	Computer() {
		super(200);
	}

	public String toString() {
		return "Computer";
	}
}

class Radio extends Product {
	Radio() {
		super(30);
	}

	public String toString() {
		return "Radio";
	}
}

class Buyer {
	int money = 1000;
	int bonusPoint = 0;
	Product[] item = new Product[10];
	int i = 0;

	void buy(Product p) {
		if (p.price > this.money) {
			System.out.println("잔액이 부족합니다.");
			return;
		}
		money -= p.price;
		bonusPoint += p.bonusPoint;
		item[i++] = p;
		System.out.println(p + "을 구입하셨습니다.");
	}

	void summary() {
		int sum = 0;
		String itemList = "";
		for (int i = 0; i < item.length; i++) {
			if (item[i] == null)
				break;
			sum += item[i].price;
			itemList += item[i].toString() + ", ";
		}
		System.out.println("구입한 물품의 총 가격은" + sum + "입니다.");
		System.out.println("구입한 내역은" + itemList + "입니다.");
	}
}

public class Object {

	public static void main(String args[]) {
		Buyer b = new Buyer();

		b.buy(new Tv());
		b.buy(new Computer());
		b.buy(new Radio());
		b.summary();
	}
}

***메서드에서 Exception in thread "main" java.lang.NullPointerException 오류가 뜨는이유?? 
메서드 내의 객체가 null인데 그 객체의 함수를 부르게되면 NullPointer오류가 나옴!!

-----------------------------------------------------------------------------Java의 정석 372까지

*Vector 클래스
객체 배열의 크기를 10으로 선언할 경우 11개 이상의 객체를 저장 못하는 문제가 있음
문제 해결을 위해 Vector 클래스를 사용
Vector 클래스는 동적으로 크기가 관리되는 객체배열
***내부적으로 object타입의 배열을 가지고 있어서 어떤 객체든 저장할 수 있음

Vector() : 10개의 객체를 저장할 수 있는 Vector 인스턴스를 생성한다
boolean add(object o) : Vector에 객체를 추가한다. 추가에 성공하면 true, 실패하면 false 반환
boolean remove(object o) : Vector에 객체를 제거한다.
boolean isEmpty() : Vector가 비어있는지 검사한다.
object get(int index) : 인덱스 위치의 객체를 반환한다.
int size() : Vector에 저장되어 있는 객체의 수를 반환한다.

package object;

import java.util.*;

class Product {
	int price = 0;
	int bonusPoint = 0;

	Product(int price) {
		this.price = price;
		this.bonusPoint = price / 10;
	}

	Product() {
	}
}

class Tv extends Product {
	Tv() {
		super(100);
	}

	public String toString() {
		return "TV";
	}
}

class Computer extends Product {
	Computer() {
		super(200);
	}

	public String toString() {
		return "Computer";
	}
}

class Audio extends Product {
	Audio() {
		super(30);
	}

	public String toString() {
		return "Audio";
	}
}

class Buyer {
	int money = 1000;
	int bonusPoint = 0;
	Vector item = new Vector();

	void buy(Product p) {
		if (money < p.price) {
			System.out.println("잔액이 부족합니다.");
		}

		money -= p.price;
		bonusPoint += p.bonusPoint;
		item.add(p);
		System.out.println(p + "을 구입하셨습니다.");
	}

	void refund(Product p) {
		if (item.remove(p)) {
			money += p.price;
			bonusPoint -= p.bonusPoint;
			System.out.println(p + "을 반품하셨습니다.");
		} else {
			System.out.println("환불할 물건이 없습니다.");
		}
	}

	void summary() {
		int sum = 0;
		String itemList = "";

		if (item.isEmpty()) {
			System.out.println("구입하신 물건이 없습니다.");
			return;
		}

		for (int i = 0; i < item.size(); i++) {
			Product p = (Product) item.get(i);
			sum += p.price;
			itemList += (i == 0) ? "" + p : ", " + p;
		}

		System.out.println("구입하신 물건의 총액은" + sum + "입니다.");
		System.out.println("구입하신 물건의 내역은" + itemList + "입니다.");
	}
}

public class Object {

	public static void main(String args[]) {
		Buyer b = new Buyer();
		Tv tv = new Tv();
		Computer com = new Computer();
		Audio audio = new Audio();
		b.buy(tv);
		b.buy(com);
		b.buy(audio);
		b.refund(audio);
		b.summary();
	}
}

*추상클래스
미완성 메서드를 포함하고 있는 클래스, 자손 클래스로 상속하여 구현
abstract class 클래스이름 { } 꼴로 선언

*추상메서드
추상메서드 또한 선언만 해놓고 구현부는 작성하지 않은 채로 남겨 둔 것
상속받는 클래스에 따라 달라질 수 있기 떄문에 구현부는 자손클래스에서 작성함

*추상클래스의 작성
상속이 자손 클래스를 만드는데 조상 클래스를 사용하는 것이라면, 반대로 추상클래스는
기존의 클래스의 공통부분을 뽑아내서 조상 클래스를 만드는 것
오버라이딩이 아닌 굳이 추상클래스로 작성하는 이유?
미완성한채 오버라이딩할 경우 자손클래스에서 완성된 클래스로 오해할 수 있기 때문
추상클래스로 선언하여 자손클래스에 구현을 강요하는 방식
추상메서드이므로 내용을 구현해주어야 한다는 사실을 인지
추상클래스가 선언된 부모클래스의 객체 배열로 자손클래스들의 메서드를 다룰 수 있음

*인터페이스
추상메서드와 상수만을 멤버로 가지는 추상클래스
추상클래스는 부분적으로만 완성된 '미완성 설계도'이면 인터페이스느는 구현된 것이 아무것도 없는
'기본 설게도'

*인터페이스 작성
키워드 class 대신 interface로 작성
모든 멤버변수는 public static final 이어야 하며, 이를 생략할 수 있음
모든 메서드는 public absract 이어야 하며, 이를 생략할 수 있음

*인터페이스 상속
인터페이스는 인터페이스로부터만 상속받을 수 있음
클래스와 달리 다중상속이 가능

*인터페이스 구현
인터페이스도 추상클래스처럼 그 자체로는 인스턴스를 생성할 수 없음
인터페이스 또한 자신에 정의된 추상메서드의 몸통을 만들어주는 클래스를 작성해야함
여기서 extends가 아닌 구현한다는 implements를 사용
만일 구현하는 인터페이스의 메서드 중 일부만 구현한다면 abstract를 붙여 추상클래스로 선언해야함
상속과 구현 모두 가능

--------------------------------------------------------------------Java의 정석 382까지
인터페이스의 메서드 선언부에는 public abstract가 생략되어있음
그러므로 구현하는 자손클래스에서 public으로 접근 제어자를 선언해주어야함 !!

 